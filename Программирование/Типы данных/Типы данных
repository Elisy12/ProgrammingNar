(*) - да, bool занимает 1 байт (8 бит), так как это минимальная адресуемая ячейка памяти.
(**) - на ESP8266/ESP32 int и unsigned int занимает 4 байта, то есть является аналогами типов long и unsigned long!
(***) - Компилятор также поддерживает 64 битные числа. Стандартные Arduino-библиотеки с переменными этого типа не работают, поэтому можно использовать только в своём коде.

ЦЕЛОЧИСЛЕННЫЕ ТИПЫ:
Переменные целочисленных типов нужны для хранения целых чисел. В своей программе рекомендуется использовать альтернативное название типов (второй столбец в таблице выше), потому что:
-Проще ориентироваться в максимальных значениях
-Легче запомнить
-Название более короткое
-Проще изменить один тип на другой
-Размер переменной задан жёстко и не зависит от платформы (например int на AVR это 2 байта, а на esp8266 - 4 байта)

Максимальные значения хранятся в константах, которые можно использовать в коде. Иногда это помогает избавиться от лишних вычислений:
-UINT8_MAX - 255
-INT8_MAX - 127
-UINT16_MAX - 65 535
-INT16_MAX - 32 767
-UINT32_MAX- 4 294 967 295
-INT32_MAX - 2 147 483 647
-UINT64_MAX - 18 446 744 073 709 551 615
-INT64_MAX - ‭9 223 372 036 854 775 807

ЛОГИЧЕСКИЙ ТИП:
bool - логический, он же булевый (придуман Джорджем Булем) тип данных, принимает значения 0 и 1 или false и true - ложь и правда.
Используется для хранения состояний, например включено/выключено, а также для работы в условных конструкциях.

Также переменная типа bool принимает значение true, если присвоить ей любое отличное от нуля число.
-bool a = 0;  // false
-bool b = 1;  // true
-bool c = 25; // true

СИМВОЛЬНЫЙ ТИП:
char - тип данных для хранения символов, символ указывается в одинарных кавычках:  char var = 'a';.

Отдельный символьный тип данных нужен для удобства работы, чтобы программа могла понять разницу между числом и символом, например для вывода на дисплей (чтобы вывести именно букву A, а не число 65).
Из символов можно составлять строки, об этом более подробно поговорим в уроках про символьные строки и String-строки.
